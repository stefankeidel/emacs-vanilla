#+TITLE: Emacs configuration file
#+AUTHOR: Stefan Keidel
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

* About

  This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to
  keep my =~/.emacs.d= tidy, but still be able to keep it all in one file. I
  aim to briefly explain all my configurations as I go along!

* Meta

  I want lexical scoping for the init-file, which can be specified in the
  header. The first line of the configuration is as follows:

  #+begin_src emacs-lisp

  ;;; -*- lexical-binding: t -*-

  #+end_src

  The =init.el= should (after the first run) mirror the source blocks in the
  =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts
  the code blocks from the current file into a source-specific file (in this
  case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to the
  =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  #+begin_src emacs-lisp

    (require 'org)
    (defun tangle-init ()
      "If the current buffer is init.org the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))

    (add-hook 'after-save-hook 'tangle-init)

  #+end_src
  
** Faster startup

   A common optimization is to temporarily disable garbage collection during
   initialization. Here, we set the ~gc-cons-threshold~ to a ridiculously large
   number, and restore the default value after initialization.

   #+begin_src emacs-lisp :tangle early-init.el
   (setq gc-cons-threshold most-positive-fixnum)
   (add-hook 'after-init-hook
             (lambda ()
               (setq gc-cons-threshold (* 1024 1024 20))))
   #+end_src

* Packages
  
  John Wiegley's extremely popular [[https://github.com/jwiegley/use-package][use-package]] was included in [[https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg00261.html][Emacs 29]]. It
  provides a powerful macro for isolating package configuration. After ignoring
  this for a decade, I'll budge and give it a whirl.

  #+begin_src emacs-lisp

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

  Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive
  and is well maintained.

  #+begin_src emacs-lisp

  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))

  #+end_src

* Sane defaults

  These are what /I/ consider to be saner defaults.

  Set =utf-8= as preferred coding system.

  #+begin_src emacs-lisp

  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)

  #+end_src

  We can set variables to whatever value we'd like using =setq=.

  #+begin_src emacs-lisp

    (setq auto-revert-interval 1            ; Refresh buffers fast
          create-lockfiles nil              ; Disable lockfiles
          default-input-method "TeX"        ; Use TeX when toggling input method
          echo-keystrokes 0.1               ; Show keystrokes asap
          enable-recursive-minibuffers t    ; Allow recursive minibuffers
          frame-inhibit-implied-resize 1    ; Don't resize frame implicitly
          inhibit-startup-screen t          ; No splash screen please
          recentf-max-saved-items 10000     ; Show more recent files
          ring-bell-function 'ignore        ; Quiet
          scroll-margin 1                   ; Space between cursor and top/bottom
          sentence-end-double-space nil     ; No double space
          custom-file                       ; Customizations in a separate file
          (concat user-emacs-directory "custom.el"))

    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)

    ;; Some mac-bindings interfere with Emacs bindings.
    (when (boundp 'mac-pass-command-to-system)
      (setq mac-pass-command-to-system nil))

  #+end_src

  Some variables are buffer-local, so changing them using =setq= will only
  change them in a single buffer. Using =setq-default= we change the
  buffer-local variable's default value.

  #+begin_src emacs-lisp

  (setq-default tab-width 4                       ; Smaller tabs
                fill-column 79                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                indent-tabs-mode nil              ; Use spaces instead of tabs
                split-width-threshold 160         ; Split verticly by default
                split-height-threshold nil        ; Split verticly by default
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere

  #+end_src

  Answering /yes/ and /no/ to each question from Emacs can be tedious, a single
  /y/ or /n/ will suffice.

  #+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

  #+end_src

  To avoid file system clutter we put all auto saved files in a single
  directory.

  #+begin_src emacs-lisp

  (defvar emacs-autosave-directory
    (concat user-emacs-directory "autosaves/")
    "This variable dictates where to put auto saves. It is set to a
    directory called autosaves located wherever your .emacs.d/ is
    located.")

  ;; Sets all files to be backed up and auto saved in a single directory.
  (setq backup-directory-alist
        `((".*" . ,emacs-autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))

  #+end_src
  
* Visual


  First off, let's declutter. Remove clickies to give a nice and clean look.
  Also, the cursor can relax. We add this to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init]], as it might be
  marginally faster, and look less wonky.

  #+begin_src emacs-lisp :tangle early-init.el

  (dolist (mode
           '(tool-bar-mode                ; No toolbars, more room for text
             scroll-bar-mode              ; No scroll bars either
             blink-cursor-mode))          ; The blinking cursor gets old
    (funcall mode 0))

  #+end_src

  Add a small border on the frame. This also goes in the early-init.

  #+begin_src emacs-lisp :tangle early-init.el

  (add-to-list 'default-frame-alist '(undecorated-round . t))

  #+end_src

  Spaceline for modeline. https://github.com/TheBB/spaceline

  #+begin_src emacs-lisp
    (use-package spaceline :ensure t)
    (require 'spaceline-config)
    (spaceline-emacs-theme)
    (spaceline-toggle-minor-modes-off)
  #+end_src

  Doom-one theme

  #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        ;; Global settings (defaults)
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled
        (load-theme 'doom-one t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)
        ;; Enable custom neotree theme (all-the-icons must be installed!)
        (doom-themes-neotree-config)
        ;; or for treemacs users
        (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
        (doom-themes-treemacs-config)
        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config))
  #+end_src

  All The Icons!
  
  #+begin_src emacs-lisp
      (use-package all-the-icons
        :ensure t
        :if (display-graphic-p))
  #+end_src
  
  My font config

  #+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :family "Hack Nerd Font" :height 190)

    (set-face-attribute 'variable-pitch nil
                        :family "Hack Nerd Font")
    (custom-set-faces
      `(fringe ((t (:background nil))))) ; make fringe match the bg
  #+end_src

* Key bindings

  Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that holds
  all my custom bindings. This map can be activated by toggling a simple
  =minor-mode= that does nothing more than activating the map. This inhibits
  other =major-modes= to override these bindings.

  #+begin_src emacs-lisp

  (defvar custom-bindings-map (make-sparse-keymap)
    "A keymap for custom bindings.")

  #+end_src
* Mac OS X

  I try to minimize the use of frames. The native compilation gives a lot of
  warnings, but they seem safe to ignore.

  #+begin_src emacs-lisp

  (when (memq window-system '(mac ns))
    (setq ns-pop-up-frames nil
          native-comp-async-report-warnings-errors nil))

  #+end_src

  The package [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] synchronizes environment variables from the
  shell to Emacs. This makes it a lot easier to deal with external programs on
  macOS.

  #+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))

  #+end_src

  It is useful to be able to occasionally open the file associated with a
  buffer in macOS Finder.

  #+begin_src emacs-lisp

  (use-package reveal-in-osx-finder
    :if (memq window-system '(mac ns)))

  #+end_src

* Modes

  Here are a list of modes that I prefer enable by default.

  #+begin_src emacs-lisp

      (dolist (mode
               '(delete-selection-mode        ; Replace selected text
                 dirtrack-mode                ; directory tracking in *shell*
                 global-auto-revert-mode      ; Revert files when changed on disk
                 global-so-long-mode          ; Mitigate performance for long lines
                 recentf-mode                 ; Recently opened files
                 show-paren-mode
                 which-key-mode))            ; Highlight matching parentheses
        (funcall mode 1))

  #+end_src

* Version control

  Magit is the best.

  #+begin_src emacs-lisp

    ;; A Git porcelain inside Emacs.
    (use-package magit
      :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :bind (:map custom-bindings-map
                  ("s-m m" . magit-status)
                  ("s-m j" . magit-dispatch)
                  ("s-m k" . magit-file-dispatch)
                  ("s-m l" . magit-log-buffer-file)
                  ("s-m b" . magit-blame)
                  ))

  #+end_src

  Have some visual indication where there are uncommitted changes.

  #+begin_src emacs-lisp

  ;; Highlight uncommitted changes using VC
  (use-package diff-hl
    :config
    (global-diff-hl-mode 1))
  #+end_src

* Completion UI

  I have transitioned from [[https://emacs-helm.github.io/helm/][Helm]] to [[http://oremacs.com/swiper/][Ivy]], and now, on to [[https://github.com/minad/vertico][Vertico]]. It improves the
  interface calling commands (i.e. ~M-x~), finding files, switching buffers,
  searching files and so on. Using the ~vertico-buffer-mode~ gives a more
  Helm-like experience, where completions are given a full fledged buffer.

  #+begin_src emacs-lisp

    ;; VERTical Interactive COmpletion
    (use-package vertico
      :ensure t
      :init
      (vertico-mode 1)
      :config
      (setq vertico-count 25))

  #+end_src

  Use the built in ~savehist-mode~ to prioritize recently used commands.

  #+begin_src emacs-lisp

  ;; Save minibuffer history
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode 1))

  #+end_src

  With [[https://github.com/minad/marginalia/][Marginalia]], we get better descriptions for commands inline.

  #+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations
  (use-package marginalia
    :init 
    (marginalia-mode 1))

  #+end_src

  Set idle delay for which-key, now in Emacs 30

  #+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations
  (setq which-key-idle-delay 0.2)

  #+end_src

* Final key binding

 Lastly we need to activate the map by creating and activating the
 =minor-mode=.

 #+begin_src emacs-lisp

 (define-minor-mode custom-bindings-mode
   "A mode that activates custom-bindings."
   :init-value t
   :keymap custom-bindings-map)

 #+end_src
