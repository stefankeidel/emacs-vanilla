#+TITLE: Emacs configuration file
#+AUTHOR: Stefan Keidel
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

* About

  This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to
  keep my =~/.emacs.d= tidy, but still be able to keep it all in one file. I
  aim to briefly explain all my configurations as I go along!

* Meta

  I want lexical scoping for the init-file, which can be specified in the
  header. The first line of the configuration is as follows:

  #+begin_src emacs-lisp

  ;;; -*- lexical-binding: t -*-

  #+end_src

  The =init.el= should (after the first run) mirror the source blocks in the
  =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts
  the code blocks from the current file into a source-specific file (in this
  case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to the
  =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  #+begin_src emacs-lisp

    (require 'org)
    (defun tangle-init ()
      "If the current buffer is init.org the code-blocks are
      tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))

    (add-hook 'after-save-hook 'tangle-init)

  #+end_src
  
** Faster startup

   A common optimization is to temporarily disable garbage collection during
   initialization. Here, we set the ~gc-cons-threshold~ to a ridiculously large
   number, and restore the default value after initialization.

   #+begin_src emacs-lisp :tangle early-init.el
   (setq gc-cons-threshold most-positive-fixnum)
   (add-hook 'after-init-hook
             (lambda ()
               (setq gc-cons-threshold (* 1024 1024 20))))
   #+end_src

* Packages
  
  John Wiegley's extremely popular [[https://github.com/jwiegley/use-package][use-package]] was included in [[https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg00261.html][Emacs 29]]. It
  provides a powerful macro for isolating package configuration. After ignoring
  this for a decade, I'll budge and give it a whirl.

  #+begin_src emacs-lisp

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

  Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive
  and is well maintained.

  #+begin_src emacs-lisp

  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))

  #+end_src

* Defaults

  Set =utf-8= as preferred coding system.

  #+begin_src emacs-lisp

  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)

  #+end_src

  We can set variables to whatever value we'd like using =setq=.

  #+begin_src emacs-lisp

    (setq auto-revert-interval 1            ; Refresh buffers fast
          create-lockfiles nil              ; Disable lockfiles
          default-input-method "TeX"        ; Use TeX when toggling input method
          echo-keystrokes 0.1               ; Show keystrokes asap
          enable-recursive-minibuffers t    ; Allow recursive minibuffers
          frame-inhibit-implied-resize 1    ; Don't resize frame implicitly
          inhibit-startup-screen t          ; No splash screen please
          recentf-max-saved-items 10000     ; Show more recent files
          ring-bell-function 'ignore        ; Quiet
          scroll-margin 1                   ; Space between cursor and top/bottom
          sentence-end-double-space nil     ; No double space
          custom-file                       ; Customizations in a separate file
          (concat user-emacs-directory "custom.el"))

    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)

    ;; Some mac-bindings interfere with Emacs bindings.
    (when (boundp 'mac-pass-command-to-system)
      (setq mac-pass-command-to-system nil))

  #+end_src

  Some variables are buffer-local, so changing them using =setq= will only
  change them in a single buffer. Using =setq-default= we change the
  buffer-local variable's default value.

  #+begin_src emacs-lisp

  (setq-default tab-width 4                       ; Smaller tabs
                fill-column 79                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                indent-tabs-mode nil              ; Use spaces instead of tabs
                split-width-threshold 160         ; Split verticly by default
                split-height-threshold nil        ; Split verticly by default
                frame-resize-pixelwise t          ; Fine-grained frame resize
                auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere

  #+end_src

  Answering /yes/ and /no/ to each question from Emacs can be tedious, a single
  /y/ or /n/ will suffice.

  #+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

  #+end_src

  To avoid file system clutter we put all auto saved files in a single
  directory.

  #+begin_src emacs-lisp

  (defvar emacs-autosave-directory
    (concat user-emacs-directory "autosaves/")
    "This variable dictates where to put auto saves. It is set to a
    directory called autosaves located wherever your .emacs.d/ is
    located.")

  ;; Sets all files to be backed up and auto saved in a single directory.
  (setq backup-directory-alist
        `((".*" . ,emacs-autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))

  #+end_src
  
* Visual

  First off, let's declutter. Remove clickies to give a nice and clean look.
  Also, the cursor can relax. We add this to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init]], as it might be
  marginally faster, and look less wonky.

  #+begin_src emacs-lisp :tangle early-init.el

  (dolist (mode
           '(tool-bar-mode                ; No toolbars, more room for text
             scroll-bar-mode              ; No scroll bars either
             blink-cursor-mode))          ; The blinking cursor gets old
    (funcall mode 0))

  #+end_src

  Add a small border on the frame. This also goes in the early-init.

  #+begin_src emacs-lisp :tangle early-init.el

  (add-to-list 'default-frame-alist '(undecorated-round . t))

  #+end_src

  Spaceline for modeline. https://github.com/TheBB/spaceline

  #+begin_src emacs-lisp
    (use-package spaceline :ensure t)
    (require 'spaceline-config)
    (spaceline-emacs-theme)
    (spaceline-toggle-minor-modes-off)
  #+end_src

  Doom-one theme

  #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        ;; Global settings (defaults)
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled
        (load-theme 'doom-one t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)
        ;; Enable custom neotree theme (all-the-icons must be installed!)
        (doom-themes-neotree-config)
        ;; or for treemacs users
        (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
        (doom-themes-treemacs-config)
        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config))
  #+end_src

  All The Icons!
  
  #+begin_src emacs-lisp
      (use-package all-the-icons
        :ensure t
        :if (display-graphic-p))
  #+end_src
  
  My font config

  #+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :family "Hack Nerd Font" :height 190)

    (set-face-attribute 'variable-pitch nil
                        :family "Hack Nerd Font")
    (custom-set-faces
      `(fringe ((t (:background nil))))) ; make fringe match the bg
  #+end_src

* Key bindings

  Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that holds
  all my custom bindings. This map can be activated by toggling a simple
  =minor-mode= that does nothing more than activating the map. This inhibits
  other =major-modes= to override these bindings.

  #+begin_src emacs-lisp

  (defvar custom-bindings-map (make-sparse-keymap)
    "A keymap for custom bindings.")

  #+end_src
* Mac OS X

  I try to minimize the use of frames. The native compilation gives a lot of
  warnings, but they seem safe to ignore.

  #+begin_src emacs-lisp

  (when (memq window-system '(mac ns))
    (setq ns-pop-up-frames nil
          native-comp-async-report-warnings-errors nil))

  #+end_src

  The package [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] synchronizes environment variables from the
  shell to Emacs. This makes it a lot easier to deal with external programs on
  macOS.

  #+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))

  #+end_src

  It is useful to be able to occasionally open the file associated with a
  buffer in macOS Finder.

  #+begin_src emacs-lisp

  (use-package reveal-in-osx-finder
    :if (memq window-system '(mac ns)))

  #+end_src

* Modes

  Here are a list of modes that I prefer enable by default.

  #+begin_src emacs-lisp

      (dolist (mode
               '(delete-selection-mode        ; Replace selected text
                 dirtrack-mode                ; directory tracking in *shell*
                 global-auto-revert-mode      ; Revert files when changed on disk
                 global-so-long-mode          ; Mitigate performance for long lines
                 recentf-mode                 ; Recently opened files
                 show-paren-mode
                 which-key-mode))            ; Highlight matching parentheses
        (funcall mode 1))

  #+end_src

* Version control

  Magit is the best.

  #+begin_src emacs-lisp

    ;; A Git porcelain inside Emacs.
    (use-package magit
      :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :bind (:map custom-bindings-map
                  ("s-m m" . magit-status)
                  ("s-m j" . magit-dispatch)
                  ("s-m k" . magit-file-dispatch)
                  ("s-m l" . magit-log-buffer-file)
                  ("s-m b" . magit-blame)
                  ))

  #+end_src

  Have some visual indication where there are uncommitted changes.

  #+begin_src emacs-lisp

  ;; Highlight uncommitted changes using VC
  (use-package diff-hl
    :config
    (global-diff-hl-mode 1))
  #+end_src

* Completion UI

  I'm using Vertico. It improves the
  interface calling commands (i.e. ~M-x~), finding files, switching buffers,
  searching files and so on. Using the ~vertico-buffer-mode~ gives a more
  Helm-like experience, where completions are given a full fledged buffer.

  #+begin_src emacs-lisp

    ;; VERTical Interactive COmpletion
    (use-package vertico
      :ensure t
      :init
      (vertico-mode 1)
      :config
      (setq vertico-count 25))

  #+end_src

  Use the built in ~savehist-mode~ to prioritize recently used commands.

  #+begin_src emacs-lisp

  ;; Save minibuffer history
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode 1))

  #+end_src

  With [[https://github.com/minad/marginalia/][Marginalia]], we get better descriptions for commands inline.

  #+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations
  (use-package marginalia
    :init 
    (marginalia-mode 1))

  #+end_src

  Set idle delay for which-key, now in Emacs 30

  #+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations
  (setq which-key-idle-delay 0.2)

  #+end_src

** Navigation and searching

   The package [[https://github.com/minad/consult][Consult]] improves navigation and searching.

  #+begin_src emacs-lisp

      ;; Consulting completing-read
      (use-package consult
        :bind (:map custom-bindings-map
                    ("s-e" . consult-buffer)
                    ("C-c r" . consult-ripgrep)
                    ("C-s" . consult-line))
        :config
        (setq consult-preview-key (list :debounce 0.1 'any)))
   #+end_src

  #+begin_src emacs-lisp
    (use-package ripgrep
      :ensure t)
   #+end_src

  #+begin_src emacs-lisp
    (use-package browse-kill-ring
      :ensure t
      :bind (:map custom-bindings-map ("M-y" . browse-kill-ring)))
   #+end_src

** Completion

  Company mode

  #+begin_src emacs-lisp
    (use-package company :ensure t)
    (global-company-mode)
  #+end_src

  #+begin_src emacs-lisp

  ;; Emacs completion style that matches multiple regexps in any order
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic partial-completion)
          completion-category-overrides '((file (styles basic partial-completion)))
          orderless-component-separator "[ |]"))

  #+end_src
 
* Project Management

 #+begin_src emacs-lisp
   (use-package projectile
     :ensure t
     :init
     (projectile-mode +1)
     :bind (:map projectile-mode-map
                 ("s-p" . projectile-command-map)
                 ("C-c p" . projectile-command-map)
                 ("s-f" . projectile-ripgrep)))
  #+end_src

* Editing

** General


  #+begin_src emacs-lisp
    (use-package easy-kill
        :ensure t
        :bind (:map custom-bindings-map
                    ("s-," . easy-mark)
                    ))

    (global-set-key [remap kill-ring-save] 'easy-kill)
    (global-set-key [remap mark-sexp] 'easy-mark)
  #+end_src

  #+begin_src emacs-lisp

  ;; Multiple cursors for Emacs
  (use-package multiple-cursors
    :defer t
    :hook ((multiple-cursors-mode-enabled . (lambda () (corfu-mode -1)))
           (multiple-cursors-mode-disabled . (lambda () (corfu-mode 1))))
    :bind (:map custom-bindings-map
                ("s-d" . mc/mark-all-like-this)
                ("s-." . mc/mark-next-like-this)))

  #+end_src

  #+begin_src emacs-lisp

    (use-package avy
      :ensure t
      :defer t
      :bind (:map custom-bindings-map
                  ("s-z" . avy-goto-char)))

  #+end_src

  #+begin_src emacs-lisp
    (use-package yasnippet :config (yas-global-mode))
  #+end_src

  #+begin_src emacs-lisp
    (use-package undo-tree
      :diminish
      :init
      (global-undo-tree-mode 1)
      (setq undo-tree-auto-save-history t)
      (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
    )
  #+end_src

** LSP UI

#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :config (setq lsp-ui-sideline-show-hover t
                lsp-ui-sideline-delay 0.5
                lsp-ui-doc-delay 0.5
                lsp-ui-doc-max-height 40
                lsp-ui-doc-show-with-cursor t
                lsp-ui-doc-position 'at-point
                lsp-ui-doc-alignment 'frame
                lsp-ui-doc-header nil
                lsp-ui-doc-include-signature t
                lsp-ui-peek-enable t
                lsp-ui-peek-show-directory t
                lsp-ui-doc-use-childframe t))

(use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

;; peek
(define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
(define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
#+end_src

** Treesit

#+begin_src emacs-lisp
  (use-package treesit
    :mode (("\\.tsx\\'" . tsx-ts-mode))
    :ensure f
    :preface
    (defun mp-setup-install-grammars ()
      "Install Tree-sitter grammars if they are absent."
      (interactive)
      (dolist (grammar
               ;; Note the version numbers. These are the versions that
               ;; are known to work with Combobulate *and* Emacs.
               '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
                 (go . ("https://github.com/tree-sitter/tree-sitter-go" "v0.20.0"))
                 (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
                 (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1" "src"))
                 (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
                 (markdown . ("https://github.com/ikatyang/tree-sitter-markdown" "v0.7.1"))
                 (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
                 (rust . ("https://github.com/tree-sitter/tree-sitter-rust" "v0.21.2"))
                 (toml . ("https://github.com/tree-sitter/tree-sitter-toml" "v0.5.1"))
                 (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
                 (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
                 (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))
        (add-to-list 'treesit-language-source-alist grammar)
        ;; Only install `grammar' if we don't already have it
        ;; installed. However, if you want to *update* a grammar then
        ;; this obviously prevents that from happening.
        (unless (treesit-language-available-p (car grammar))
          (treesit-install-language-grammar (car grammar)))))

    ;; Optional. Combobulate works in both xxxx-ts-modes and
    ;; non-ts-modes.

    ;; You can remap major modes with `major-mode-remap-alist'. Note
    ;; that this does *not* extend to hooks! Make sure you migrate them
    ;; also
    (dolist (mapping
             '((python-mode . python-ts-mode)
               (css-mode . css-ts-mode)
               (typescript-mode . typescript-ts-mode)
               (js2-mode . js-ts-mode)
               (bash-mode . bash-ts-mode)
               (conf-toml-mode . toml-ts-mode)
               (go-mode . go-ts-mode)
               (css-mode . css-ts-mode)
               (json-mode . json-ts-mode)
               (js-json-mode . json-ts-mode)))
      (add-to-list 'major-mode-remap-alist mapping))
    :config
    (mp-setup-install-grammars)
    ;; Do not forget to customize Combobulate to your liking:
    ;;
    ;;  M-x customize-group RET combobulate RET
    ;;
    ;; (use-package combobulate
    ;;   :custom
    ;;   ;; You can customize Combobulate's key prefix here.
    ;;   ;; Note that you may have to restart Emacs for this to take effect!
    ;;   (combobulate-key-prefix "C-c o")
    ;;   :hook ((prog-mode . combobulate-mode))
    ;;   ;; Amend this to the directory where you keep Combobulate's source
    ;;   ;; code.
    ;;   :load-path ("~/code/combobulate"))
  )
#+end_src

** Python

Not sure if I need this anymore, but it's here for now.

#+begin_src emacs-lisp
  (setq read-process-output-max (* 4096 1024)) ;; 4mb
#+end_src

lsp Pyright

#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-ts-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred))))
#+end_src
* Org

Org is worth its own category because it's such a huge part of my everyday
life.

** Org appear

   Setting ~org-hide-emphasis-markers~ to ~t~ often makes it harder to edit markup
   (i have found myself sometimes reverting to ~fundamental-mode~ because of
   this). The package [[https://github.com/awth13/org-appear][org-appear]] automatically shows the hidden markup when the
   cursor is on it.

   #+begin_src emacs-lisp

   (use-package org-appear
     :hook (org-mode . org-appear-mode)
     :config
     (setq org-appear-autosubmarkers t
           org-appear-autoentities t
           org-appear-autolinks t
           org-appear-inside-latex t))
   #+end_src

** Org Modern

   Touch up the appearance of org mode files with some fancy UTF-8 characters.
   I disable ~org-modern-block-fringe~ due to [[https://github.com/minad/org-modern/issues/144][org-modern conflicting with]]
   ~org-adapt-indentation~.

   #+begin_src emacs-lisp

   ;; Modern looks for Org
   (use-package org-modern
     :after org
     :hook (org-mode . org-modern-mode)
     :config
     (setq org-modern-block-fringe nil
           org-modern-star 'replace))

   #+end_src
** Org agenda setup

This is a clusterfuck of old configuration from back when. Would probably be a
good idea to break this up at some point. Essentially it combines org, org
agenda and org-babel setup into one big block. Sorry! :-/

#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/org/stefan.org"
                             "~/org/reading.org"
                             "~/org/lichtblick.org"))

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "SOMEDAY(s)" "PROGRESS(p!)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING(m)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "indian red" :weight bold)
                  ("SOMEDAY" :foreground "LightSalmon1" :weight bold)a
                  ("PROGRESS" :foreground "sky blue" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ;; For my reading list
                  ("QUEUE" :foreground "LightSalmon1" :weight bold)
                  ("STARTED" :foreground "PeachPuff2" :weight bold)
                  ("SAVED" :foreground "sky blue" :weight bold)
                  )))

    (setq org-tag-alist (quote ((:startgroup)
                                ("@errand" . ?e)
                                ("@work" . ?w)
                                ("@move" . ?m)
                                ("@home" . ?h)
                                ("@routine" . ?t)
                                ("@bike" . ?b)
                                ("@reading" . ?r)
                                (:endgroup)
                                )))
    ;; Open agenda vertically by default
    (defadvice org-agenda (around split-vertically activate)
      (let (
            (split-width-threshold 40)    ; or whatever width makes sense for you
            (split-height-threshold nil)) ; but never horizontally
        ad-do-it))

    (setq org-refile-targets '(("~/org/stefan.org" :maxlevel . 2)
                             ("~/org/reading.org" :maxlevel . 1)
                             ("~/org/lichtblick.org" :maxlevel . 2)
                             ))

  ;; one big archive for everything [file-specific rules still apply and override]
  (setq org-archive-location '"archive.org::")

  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-include-diary t)

  (use-package ob-http)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t) (python . t) (http . t) (shell . t)))

  (add-to-list 'org-modules 'org-habit t)

  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda and tasks"
           ((agenda "" ((org-agenda-span 7)))
            (tags-todo "@work")
            (tags-todo "@home")
            ;(tags-todo "@reading")
            ))
          ("r" "Reading list"
           (
            (todo "STARTED")
            (todo "QUEUE")
            (todo "SAVED")
            ))
          ))
#+end_src

** Capture

#+begin_src emacs-lisp
(setq org-capture-templates '(
   ("t" "Todo Lichtblick" entry
    (file+headline "~/org/lichtblick.org" "Tasks")
    "* TODO %i%?")
   ("s" "Todo Stefan" entry
    (file+headline "~/org/stefan.org" "tasks")
    "* TODO %i%?")
   ;; ("c" "Calendar" entry
   ;;  (file+headline "~/org/stefan.org" "calendar")
   ;;  "* %i%? \n   %t")
   ;; ;; ("s" "Standup" entry
   ;; ;;  (file+headline "~/org/idagio.org" "standups")
   ;; ;;  "** Standup %t\n*** yesterday\n-%?\n*** today\n-\n")
   ("r" "Reading List" entry
    (file+headline "~/org/reading.org" "from template")
    "** QUEUE %?")
   ))
#+end_src

** Roam

#+begin_src emacs-lisp

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/org-roam/"))
  (org-roam-capture-templates
   '(
   ("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y-%m-%d--%H-%M-%S>-${slug}.org" "#+title: ${title}\n#+filetags:")
      :unnarrowed t)
   ("t" "ticket" plain
    "* https://lichtblick.atlassian.net/browse/${title}\n\n%?\n"
    :if-new (file+head "lichtblick-tickets/%<%Y-%m-%d--%H-%M-%S>-${slug}.org"
                       "#+title: ${title}\n#+FILETAGS: ticket:lichtblick"
                       )
    :unnarrowed t)
    )
   )
  :bind (;("s-b l" . org-roam-buffer-toggle)
         ("s-b f" . org-roam-node-find)
         ("s-b g" . org-roam-graph)
         ("s-b i" . org-roam-node-insert)
         ("s-b c" . org-roam-capture)
         ;; ;; Dailies
         ;("s-b j" . org-roam-dailies-capture-today)
         )

  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:60}" 'face 'org-tag)))
  (setq org-roam-completion-everywhere t)
  (org-roam-db-autosync-mode))
#+end_src

* Copilot

#+begin_src emacs-lisp
  (use-package copilot
    :vc (:url "https://github.com/copilot-emacs/copilot.el"
              :rev :newest
              :branch "main")
    :bind (:map custom-bindings-map
                ("<f2>" . copilot-accept-completion)
                ))

  (add-hook 'prog-mode-hook 'copilot-mode)
#+end_src

* Key bindings

** For builtins

Use ~emacs~ as a package to modify the keymap.

 #+begin_src emacs-lisp
   (use-package emacs
     :bind (:map custom-bindings-map
                 ("s-w" . next-multiframe-window)
                 ("C-c a" . org-agenda)
                 ("C-c c" . org-capture)
                 ("s-i k" . kill-buffer-basename)
           ))

 #+end_src

* Final key binding

 Lastly we need to activate the map by creating and activating the
 =minor-mode=.

 #+begin_src emacs-lisp

 (define-minor-mode custom-bindings-mode
   "A mode that activates custom-bindings."
   :init-value t
   :keymap custom-bindings-map)

 #+end_src
 
